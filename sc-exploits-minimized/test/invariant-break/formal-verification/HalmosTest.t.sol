// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {FormalVerificationCatches} from "../../../src/invariant-break/FormalVerificationCatches.sol";

contract HalmosTest is Test {
    FormalVerificationCatches fvc;

    function setUp() public {
        fvc = new FormalVerificationCatches();
    }

    // in Halmos:
    // requires -> preconditions
    // require(x) -> assume x about the run
    // assume(x) <- valid foundry, but not halmos

    function check_hellFunc_doesnt_revert_halmos(uint128 _num) public view {
        // Foundry: random num1, random num2, random num3, etc
        // Halmos: f(x) == not revert
        (bool success,) = address(fvc).staticcall(abi.encodeWithSelector(fvc.hellFunc.selector, _num));
        assert(success);
    }

    function test_hellFunc_doesnt_revert_halmos() public view {
        uint128 num = 99;
        (bool success,) = address(fvc).staticcall(abi.encodeWithSelector(fvc.hellFunc.selector, num));
        assert(success);
    }
}
